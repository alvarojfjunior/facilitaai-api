generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native","darwin","debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slogan    String?
  color     String?
  whatsapp  String
  phone     String
  payDay    DateTime @default(now())
  active    Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User           User[]
  Product        Product[]
  Sale           Sale[]
  Client         Client[]
  SaleItem       SaleItem[]
  Dossier        Dossier[]
  associate      Association[]
  Ecommerce      Ecommerce[]
  LicenseInvoice LicenseInvoice[]
  Service        Service[]
  Invoice        Invoice[]
}

model LicenseInvoice {
  id        Int      @id @default(autoincrement())
  companyId Int
  value     Decimal  @db.Money
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Company Company @relation(fields: [companyId], references: [id])
}

model AccessProfile {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  allowed   Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model User {
  id              Int      @id @default(autoincrement())
  companyId       Int
  email           String   @unique
  name            String
  password        String
  accessProfileId Int
  active          Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  AccessProfile AccessProfile @relation(fields: [accessProfileId], references: [id])
  Company       Company       @relation(fields: [companyId], references: [id])
  associate     Association[]
}

model Association {
  id        Int      @id @default(autoincrement())
  userId    Int
  companyId Int
  percent   Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id])
  Company Company @relation(fields: [companyId], references: [id])
}

model Ecommerce {
  id         Int      @id @default(autoincrement())
  companyId  Int
  color      String
  templateId Int
  active     Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Company  Company  @relation(fields: [companyId], references: [id])
  Template Template @relation(fields: [templateId], references: [id])
}

model Template {
  id        Int      @id @default(autoincrement())
  template  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Ecommerce Ecommerce[]
}

model Product {
  id          Int      @id @default(autoincrement())
  companyId   Int
  name        String
  stock       Decimal
  active      Int      @default(1)
  price       Decimal  @db.Money
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Company Company @relation(fields: [companyId], references: [id])
}

model Service {
  id          Int      @id @default(autoincrement())
  companyId   Int
  name        String
  description String?
  price       Decimal? @db.Money
  active      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Company Company @relation(fields: [companyId], references: [id])
}

model Client {
  id          Int      @id @default(autoincrement())
  companyId   Int
  description String?
  address     String?
  name        String
  phone       String?
  whatsapp    String?
  active      Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Company Company   @relation(fields: [companyId], references: [id])
  Invoice Invoice[]
}

model Sale {
  id          Int      @id @default(autoincrement())
  companyId   Int
  observation String?
  canceled    Int      @default(0)
  amount      Decimal  @db.Money
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Company  Company    @relation(fields: [companyId], references: [id])
  SaleItem SaleItem[]
}

model SaleItem {
  id           Int      @id @default(autoincrement())
  companyId    Int
  type         String //product | service
  saleId       Int
  itemId       Int //product | service
  observation  String?
  initialValue Decimal  @db.Money
  discount     Decimal  @db.Money
  finalValue   Decimal  @db.Money
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Company Company @relation(fields: [companyId], references: [id])
  Sale    Sale    @relation(fields: [saleId], references: [id])
}

model Invoice {
  id          Int      @id @default(autoincrement())
  companyId   Int
  type        String //pay/recive
  description String //pay/recive
  value       Decimal  @db.Money
  clientId    Int?
  date        DateTime
  closed      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Client  Client? @relation(fields: [clientId], references: [id])
  Company Company @relation(fields: [companyId], references: [id])
}

model Dossier {
  id          Int      @id @default(autoincrement())
  companyId   Int
  userId      Int
  actionType  String   @db.VarChar(100)
  description String   @db.VarChar(100)
  identifier  Int
  timestamp   DateTime @default(now()) @db.Timestamptz

  Company Company @relation(fields: [companyId], references: [id])
}
